// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"db_lab_library/mysql/model"
)

func newSupplier(db *gorm.DB, opts ...gen.DOOption) supplier {
	_supplier := supplier{}

	_supplier.supplierDo.UseDB(db, opts...)
	_supplier.supplierDo.UseModel(&model.Supplier{})

	tableName := _supplier.supplierDo.TableName()
	_supplier.ALL = field.NewAsterisk(tableName)
	_supplier.ID = field.NewInt32(tableName, "id")
	_supplier.Name = field.NewString(tableName, "name")
	_supplier.Address = field.NewString(tableName, "address")
	_supplier.Email = field.NewString(tableName, "email")
	_supplier.CreatedAt = field.NewTime(tableName, "created_at")
	_supplier.UpdatedAt = field.NewTime(tableName, "updated_at")

	_supplier.fillFieldMap()

	return _supplier
}

type supplier struct {
	supplierDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	Address   field.String
	Email     field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s supplier) Table(newTableName string) *supplier {
	s.supplierDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s supplier) As(alias string) *supplier {
	s.supplierDo.DO = *(s.supplierDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *supplier) updateTableName(table string) *supplier {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Address = field.NewString(table, "address")
	s.Email = field.NewString(table, "email")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *supplier) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *supplier) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["address"] = s.Address
	s.fieldMap["email"] = s.Email
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s supplier) clone(db *gorm.DB) supplier {
	s.supplierDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s supplier) replaceDB(db *gorm.DB) supplier {
	s.supplierDo.ReplaceDB(db)
	return s
}

type supplierDo struct{ gen.DO }

type ISupplierDo interface {
	gen.SubQuery
	Debug() ISupplierDo
	WithContext(ctx context.Context) ISupplierDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISupplierDo
	WriteDB() ISupplierDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISupplierDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISupplierDo
	Not(conds ...gen.Condition) ISupplierDo
	Or(conds ...gen.Condition) ISupplierDo
	Select(conds ...field.Expr) ISupplierDo
	Where(conds ...gen.Condition) ISupplierDo
	Order(conds ...field.Expr) ISupplierDo
	Distinct(cols ...field.Expr) ISupplierDo
	Omit(cols ...field.Expr) ISupplierDo
	Join(table schema.Tabler, on ...field.Expr) ISupplierDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISupplierDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISupplierDo
	Group(cols ...field.Expr) ISupplierDo
	Having(conds ...gen.Condition) ISupplierDo
	Limit(limit int) ISupplierDo
	Offset(offset int) ISupplierDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISupplierDo
	Unscoped() ISupplierDo
	Create(values ...*model.Supplier) error
	CreateInBatches(values []*model.Supplier, batchSize int) error
	Save(values ...*model.Supplier) error
	First() (*model.Supplier, error)
	Take() (*model.Supplier, error)
	Last() (*model.Supplier, error)
	Find() ([]*model.Supplier, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Supplier, err error)
	FindInBatches(result *[]*model.Supplier, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Supplier) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISupplierDo
	Assign(attrs ...field.AssignExpr) ISupplierDo
	Joins(fields ...field.RelationField) ISupplierDo
	Preload(fields ...field.RelationField) ISupplierDo
	FirstOrInit() (*model.Supplier, error)
	FirstOrCreate() (*model.Supplier, error)
	FindByPage(offset int, limit int) (result []*model.Supplier, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISupplierDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByCondition(id int32, name string) (result []*model.Supplier, err error)
}

// SELECR * FROM @@table
// {{ where }}
//
//	{{ if id != 0 }}
//	  id = @id
//	{{ end }}
//	{{ if name != "" }}
//	  AND name LIKE CONCAT('%', @name, '%')
//	{{ end }}
//
// {{ end }}
func (s supplierDo) GetByCondition(id int32, name string) (result []*model.Supplier, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECR * FROM supplier ")
	var whereSQL0 strings.Builder
	if id != 0 {
		params = append(params, id)
		whereSQL0.WriteString("id = ? ")
	}
	if name != "" {
		params = append(params, name)
		whereSQL0.WriteString("AND name LIKE CONCAT('%', ?, '%') ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s supplierDo) Debug() ISupplierDo {
	return s.withDO(s.DO.Debug())
}

func (s supplierDo) WithContext(ctx context.Context) ISupplierDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s supplierDo) ReadDB() ISupplierDo {
	return s.Clauses(dbresolver.Read)
}

func (s supplierDo) WriteDB() ISupplierDo {
	return s.Clauses(dbresolver.Write)
}

func (s supplierDo) Session(config *gorm.Session) ISupplierDo {
	return s.withDO(s.DO.Session(config))
}

func (s supplierDo) Clauses(conds ...clause.Expression) ISupplierDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s supplierDo) Returning(value interface{}, columns ...string) ISupplierDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s supplierDo) Not(conds ...gen.Condition) ISupplierDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s supplierDo) Or(conds ...gen.Condition) ISupplierDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s supplierDo) Select(conds ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s supplierDo) Where(conds ...gen.Condition) ISupplierDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s supplierDo) Order(conds ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s supplierDo) Distinct(cols ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s supplierDo) Omit(cols ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s supplierDo) Join(table schema.Tabler, on ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s supplierDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s supplierDo) RightJoin(table schema.Tabler, on ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s supplierDo) Group(cols ...field.Expr) ISupplierDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s supplierDo) Having(conds ...gen.Condition) ISupplierDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s supplierDo) Limit(limit int) ISupplierDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s supplierDo) Offset(offset int) ISupplierDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s supplierDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISupplierDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s supplierDo) Unscoped() ISupplierDo {
	return s.withDO(s.DO.Unscoped())
}

func (s supplierDo) Create(values ...*model.Supplier) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s supplierDo) CreateInBatches(values []*model.Supplier, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s supplierDo) Save(values ...*model.Supplier) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s supplierDo) First() (*model.Supplier, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Supplier), nil
	}
}

func (s supplierDo) Take() (*model.Supplier, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Supplier), nil
	}
}

func (s supplierDo) Last() (*model.Supplier, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Supplier), nil
	}
}

func (s supplierDo) Find() ([]*model.Supplier, error) {
	result, err := s.DO.Find()
	return result.([]*model.Supplier), err
}

func (s supplierDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Supplier, err error) {
	buf := make([]*model.Supplier, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s supplierDo) FindInBatches(result *[]*model.Supplier, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s supplierDo) Attrs(attrs ...field.AssignExpr) ISupplierDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s supplierDo) Assign(attrs ...field.AssignExpr) ISupplierDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s supplierDo) Joins(fields ...field.RelationField) ISupplierDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s supplierDo) Preload(fields ...field.RelationField) ISupplierDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s supplierDo) FirstOrInit() (*model.Supplier, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Supplier), nil
	}
}

func (s supplierDo) FirstOrCreate() (*model.Supplier, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Supplier), nil
	}
}

func (s supplierDo) FindByPage(offset int, limit int) (result []*model.Supplier, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s supplierDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s supplierDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s supplierDo) Delete(models ...*model.Supplier) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *supplierDo) withDO(do gen.Dao) *supplierDo {
	s.DO = *do.(*gen.DO)
	return s
}
