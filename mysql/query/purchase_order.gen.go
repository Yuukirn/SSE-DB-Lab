// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"db_lab_library/mysql/model"
)

func newPurchaseOrder(db *gorm.DB, opts ...gen.DOOption) purchaseOrder {
	_purchaseOrder := purchaseOrder{}

	_purchaseOrder.purchaseOrderDo.UseDB(db, opts...)
	_purchaseOrder.purchaseOrderDo.UseModel(&model.PurchaseOrder{})

	tableName := _purchaseOrder.purchaseOrderDo.TableName()
	_purchaseOrder.ALL = field.NewAsterisk(tableName)
	_purchaseOrder.ID = field.NewInt32(tableName, "id")
	_purchaseOrder.OutOfStockRecordID = field.NewInt32(tableName, "out_of_stock_record_id")
	_purchaseOrder.Number = field.NewInt32(tableName, "number")
	_purchaseOrder.Status = field.NewString(tableName, "status")
	_purchaseOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_purchaseOrder.UpdatedAt = field.NewTime(tableName, "updated_at")

	_purchaseOrder.fillFieldMap()

	return _purchaseOrder
}

type purchaseOrder struct {
	purchaseOrderDo

	ALL                field.Asterisk
	ID                 field.Int32
	OutOfStockRecordID field.Int32
	Number             field.Int32
	Status             field.String
	CreatedAt          field.Time
	UpdatedAt          field.Time

	fieldMap map[string]field.Expr
}

func (p purchaseOrder) Table(newTableName string) *purchaseOrder {
	p.purchaseOrderDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p purchaseOrder) As(alias string) *purchaseOrder {
	p.purchaseOrderDo.DO = *(p.purchaseOrderDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *purchaseOrder) updateTableName(table string) *purchaseOrder {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.OutOfStockRecordID = field.NewInt32(table, "out_of_stock_record_id")
	p.Number = field.NewInt32(table, "number")
	p.Status = field.NewString(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *purchaseOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *purchaseOrder) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["out_of_stock_record_id"] = p.OutOfStockRecordID
	p.fieldMap["number"] = p.Number
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p purchaseOrder) clone(db *gorm.DB) purchaseOrder {
	p.purchaseOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p purchaseOrder) replaceDB(db *gorm.DB) purchaseOrder {
	p.purchaseOrderDo.ReplaceDB(db)
	return p
}

type purchaseOrderDo struct{ gen.DO }

type IPurchaseOrderDo interface {
	gen.SubQuery
	Debug() IPurchaseOrderDo
	WithContext(ctx context.Context) IPurchaseOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPurchaseOrderDo
	WriteDB() IPurchaseOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPurchaseOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPurchaseOrderDo
	Not(conds ...gen.Condition) IPurchaseOrderDo
	Or(conds ...gen.Condition) IPurchaseOrderDo
	Select(conds ...field.Expr) IPurchaseOrderDo
	Where(conds ...gen.Condition) IPurchaseOrderDo
	Order(conds ...field.Expr) IPurchaseOrderDo
	Distinct(cols ...field.Expr) IPurchaseOrderDo
	Omit(cols ...field.Expr) IPurchaseOrderDo
	Join(table schema.Tabler, on ...field.Expr) IPurchaseOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderDo
	Group(cols ...field.Expr) IPurchaseOrderDo
	Having(conds ...gen.Condition) IPurchaseOrderDo
	Limit(limit int) IPurchaseOrderDo
	Offset(offset int) IPurchaseOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPurchaseOrderDo
	Unscoped() IPurchaseOrderDo
	Create(values ...*model.PurchaseOrder) error
	CreateInBatches(values []*model.PurchaseOrder, batchSize int) error
	Save(values ...*model.PurchaseOrder) error
	First() (*model.PurchaseOrder, error)
	Take() (*model.PurchaseOrder, error)
	Last() (*model.PurchaseOrder, error)
	Find() ([]*model.PurchaseOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PurchaseOrder, err error)
	FindInBatches(result *[]*model.PurchaseOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PurchaseOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPurchaseOrderDo
	Assign(attrs ...field.AssignExpr) IPurchaseOrderDo
	Joins(fields ...field.RelationField) IPurchaseOrderDo
	Preload(fields ...field.RelationField) IPurchaseOrderDo
	FirstOrInit() (*model.PurchaseOrder, error)
	FirstOrCreate() (*model.PurchaseOrder, error)
	FindByPage(offset int, limit int) (result []*model.PurchaseOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPurchaseOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByCondition(id int32, outOfStockRecordID int32) (result []*model.PurchaseOrder, err error)
}

// SELECT * FROM @@table
// {{ where }}
//
//	{{ if id != 0 }}
//	  id = @id
//	{{ end }}
//	{{ if outOfStockRecordID != 0 }}
//	  AND out_of_stock_record_id = @outOfStockRecordID
//	{{ end }}
//
// {{ end }}
func (p purchaseOrderDo) GetByCondition(id int32, outOfStockRecordID int32) (result []*model.PurchaseOrder, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM purchase_order ")
	var whereSQL0 strings.Builder
	if id != 0 {
		params = append(params, id)
		whereSQL0.WriteString("id = ? ")
	}
	if outOfStockRecordID != 0 {
		params = append(params, outOfStockRecordID)
		whereSQL0.WriteString("AND out_of_stock_record_id = ? ")
	}
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p purchaseOrderDo) Debug() IPurchaseOrderDo {
	return p.withDO(p.DO.Debug())
}

func (p purchaseOrderDo) WithContext(ctx context.Context) IPurchaseOrderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p purchaseOrderDo) ReadDB() IPurchaseOrderDo {
	return p.Clauses(dbresolver.Read)
}

func (p purchaseOrderDo) WriteDB() IPurchaseOrderDo {
	return p.Clauses(dbresolver.Write)
}

func (p purchaseOrderDo) Session(config *gorm.Session) IPurchaseOrderDo {
	return p.withDO(p.DO.Session(config))
}

func (p purchaseOrderDo) Clauses(conds ...clause.Expression) IPurchaseOrderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p purchaseOrderDo) Returning(value interface{}, columns ...string) IPurchaseOrderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p purchaseOrderDo) Not(conds ...gen.Condition) IPurchaseOrderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p purchaseOrderDo) Or(conds ...gen.Condition) IPurchaseOrderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p purchaseOrderDo) Select(conds ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p purchaseOrderDo) Where(conds ...gen.Condition) IPurchaseOrderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p purchaseOrderDo) Order(conds ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p purchaseOrderDo) Distinct(cols ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p purchaseOrderDo) Omit(cols ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p purchaseOrderDo) Join(table schema.Tabler, on ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p purchaseOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p purchaseOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p purchaseOrderDo) Group(cols ...field.Expr) IPurchaseOrderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p purchaseOrderDo) Having(conds ...gen.Condition) IPurchaseOrderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p purchaseOrderDo) Limit(limit int) IPurchaseOrderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p purchaseOrderDo) Offset(offset int) IPurchaseOrderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p purchaseOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPurchaseOrderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p purchaseOrderDo) Unscoped() IPurchaseOrderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p purchaseOrderDo) Create(values ...*model.PurchaseOrder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p purchaseOrderDo) CreateInBatches(values []*model.PurchaseOrder, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p purchaseOrderDo) Save(values ...*model.PurchaseOrder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p purchaseOrderDo) First() (*model.PurchaseOrder, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PurchaseOrder), nil
	}
}

func (p purchaseOrderDo) Take() (*model.PurchaseOrder, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PurchaseOrder), nil
	}
}

func (p purchaseOrderDo) Last() (*model.PurchaseOrder, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PurchaseOrder), nil
	}
}

func (p purchaseOrderDo) Find() ([]*model.PurchaseOrder, error) {
	result, err := p.DO.Find()
	return result.([]*model.PurchaseOrder), err
}

func (p purchaseOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PurchaseOrder, err error) {
	buf := make([]*model.PurchaseOrder, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p purchaseOrderDo) FindInBatches(result *[]*model.PurchaseOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p purchaseOrderDo) Attrs(attrs ...field.AssignExpr) IPurchaseOrderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p purchaseOrderDo) Assign(attrs ...field.AssignExpr) IPurchaseOrderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p purchaseOrderDo) Joins(fields ...field.RelationField) IPurchaseOrderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p purchaseOrderDo) Preload(fields ...field.RelationField) IPurchaseOrderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p purchaseOrderDo) FirstOrInit() (*model.PurchaseOrder, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PurchaseOrder), nil
	}
}

func (p purchaseOrderDo) FirstOrCreate() (*model.PurchaseOrder, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PurchaseOrder), nil
	}
}

func (p purchaseOrderDo) FindByPage(offset int, limit int) (result []*model.PurchaseOrder, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p purchaseOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p purchaseOrderDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p purchaseOrderDo) Delete(models ...*model.PurchaseOrder) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *purchaseOrderDo) withDO(do gen.Dao) *purchaseOrderDo {
	p.DO = *do.(*gen.DO)
	return p
}
