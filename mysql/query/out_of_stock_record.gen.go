// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"db_lab_library/mysql/model"
)

func newOutOfStockRecord(db *gorm.DB, opts ...gen.DOOption) outOfStockRecord {
	_outOfStockRecord := outOfStockRecord{}

	_outOfStockRecord.outOfStockRecordDo.UseDB(db, opts...)
	_outOfStockRecord.outOfStockRecordDo.UseModel(&model.OutOfStockRecord{})

	tableName := _outOfStockRecord.outOfStockRecordDo.TableName()
	_outOfStockRecord.ALL = field.NewAsterisk(tableName)
	_outOfStockRecord.ID = field.NewInt32(tableName, "id")
	_outOfStockRecord.BookID = field.NewInt32(tableName, "book_id")
	_outOfStockRecord.Number = field.NewInt32(tableName, "number")
	_outOfStockRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_outOfStockRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_outOfStockRecord.fillFieldMap()

	return _outOfStockRecord
}

type outOfStockRecord struct {
	outOfStockRecordDo

	ALL       field.Asterisk
	ID        field.Int32
	BookID    field.Int32
	Number    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (o outOfStockRecord) Table(newTableName string) *outOfStockRecord {
	o.outOfStockRecordDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outOfStockRecord) As(alias string) *outOfStockRecord {
	o.outOfStockRecordDo.DO = *(o.outOfStockRecordDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outOfStockRecord) updateTableName(table string) *outOfStockRecord {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.BookID = field.NewInt32(table, "book_id")
	o.Number = field.NewInt32(table, "number")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *outOfStockRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outOfStockRecord) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["book_id"] = o.BookID
	o.fieldMap["number"] = o.Number
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o outOfStockRecord) clone(db *gorm.DB) outOfStockRecord {
	o.outOfStockRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outOfStockRecord) replaceDB(db *gorm.DB) outOfStockRecord {
	o.outOfStockRecordDo.ReplaceDB(db)
	return o
}

type outOfStockRecordDo struct{ gen.DO }

type IOutOfStockRecordDo interface {
	gen.SubQuery
	Debug() IOutOfStockRecordDo
	WithContext(ctx context.Context) IOutOfStockRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutOfStockRecordDo
	WriteDB() IOutOfStockRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutOfStockRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutOfStockRecordDo
	Not(conds ...gen.Condition) IOutOfStockRecordDo
	Or(conds ...gen.Condition) IOutOfStockRecordDo
	Select(conds ...field.Expr) IOutOfStockRecordDo
	Where(conds ...gen.Condition) IOutOfStockRecordDo
	Order(conds ...field.Expr) IOutOfStockRecordDo
	Distinct(cols ...field.Expr) IOutOfStockRecordDo
	Omit(cols ...field.Expr) IOutOfStockRecordDo
	Join(table schema.Tabler, on ...field.Expr) IOutOfStockRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutOfStockRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutOfStockRecordDo
	Group(cols ...field.Expr) IOutOfStockRecordDo
	Having(conds ...gen.Condition) IOutOfStockRecordDo
	Limit(limit int) IOutOfStockRecordDo
	Offset(offset int) IOutOfStockRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutOfStockRecordDo
	Unscoped() IOutOfStockRecordDo
	Create(values ...*model.OutOfStockRecord) error
	CreateInBatches(values []*model.OutOfStockRecord, batchSize int) error
	Save(values ...*model.OutOfStockRecord) error
	First() (*model.OutOfStockRecord, error)
	Take() (*model.OutOfStockRecord, error)
	Last() (*model.OutOfStockRecord, error)
	Find() ([]*model.OutOfStockRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutOfStockRecord, err error)
	FindInBatches(result *[]*model.OutOfStockRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutOfStockRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutOfStockRecordDo
	Assign(attrs ...field.AssignExpr) IOutOfStockRecordDo
	Joins(fields ...field.RelationField) IOutOfStockRecordDo
	Preload(fields ...field.RelationField) IOutOfStockRecordDo
	FirstOrInit() (*model.OutOfStockRecord, error)
	FirstOrCreate() (*model.OutOfStockRecord, error)
	FindByPage(offset int, limit int) (result []*model.OutOfStockRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutOfStockRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outOfStockRecordDo) Debug() IOutOfStockRecordDo {
	return o.withDO(o.DO.Debug())
}

func (o outOfStockRecordDo) WithContext(ctx context.Context) IOutOfStockRecordDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outOfStockRecordDo) ReadDB() IOutOfStockRecordDo {
	return o.Clauses(dbresolver.Read)
}

func (o outOfStockRecordDo) WriteDB() IOutOfStockRecordDo {
	return o.Clauses(dbresolver.Write)
}

func (o outOfStockRecordDo) Session(config *gorm.Session) IOutOfStockRecordDo {
	return o.withDO(o.DO.Session(config))
}

func (o outOfStockRecordDo) Clauses(conds ...clause.Expression) IOutOfStockRecordDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outOfStockRecordDo) Returning(value interface{}, columns ...string) IOutOfStockRecordDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outOfStockRecordDo) Not(conds ...gen.Condition) IOutOfStockRecordDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outOfStockRecordDo) Or(conds ...gen.Condition) IOutOfStockRecordDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outOfStockRecordDo) Select(conds ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outOfStockRecordDo) Where(conds ...gen.Condition) IOutOfStockRecordDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outOfStockRecordDo) Order(conds ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outOfStockRecordDo) Distinct(cols ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outOfStockRecordDo) Omit(cols ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outOfStockRecordDo) Join(table schema.Tabler, on ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outOfStockRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outOfStockRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outOfStockRecordDo) Group(cols ...field.Expr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outOfStockRecordDo) Having(conds ...gen.Condition) IOutOfStockRecordDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outOfStockRecordDo) Limit(limit int) IOutOfStockRecordDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outOfStockRecordDo) Offset(offset int) IOutOfStockRecordDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outOfStockRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutOfStockRecordDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outOfStockRecordDo) Unscoped() IOutOfStockRecordDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outOfStockRecordDo) Create(values ...*model.OutOfStockRecord) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outOfStockRecordDo) CreateInBatches(values []*model.OutOfStockRecord, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outOfStockRecordDo) Save(values ...*model.OutOfStockRecord) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outOfStockRecordDo) First() (*model.OutOfStockRecord, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutOfStockRecord), nil
	}
}

func (o outOfStockRecordDo) Take() (*model.OutOfStockRecord, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutOfStockRecord), nil
	}
}

func (o outOfStockRecordDo) Last() (*model.OutOfStockRecord, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutOfStockRecord), nil
	}
}

func (o outOfStockRecordDo) Find() ([]*model.OutOfStockRecord, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutOfStockRecord), err
}

func (o outOfStockRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutOfStockRecord, err error) {
	buf := make([]*model.OutOfStockRecord, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outOfStockRecordDo) FindInBatches(result *[]*model.OutOfStockRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outOfStockRecordDo) Attrs(attrs ...field.AssignExpr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outOfStockRecordDo) Assign(attrs ...field.AssignExpr) IOutOfStockRecordDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outOfStockRecordDo) Joins(fields ...field.RelationField) IOutOfStockRecordDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outOfStockRecordDo) Preload(fields ...field.RelationField) IOutOfStockRecordDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outOfStockRecordDo) FirstOrInit() (*model.OutOfStockRecord, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutOfStockRecord), nil
	}
}

func (o outOfStockRecordDo) FirstOrCreate() (*model.OutOfStockRecord, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutOfStockRecord), nil
	}
}

func (o outOfStockRecordDo) FindByPage(offset int, limit int) (result []*model.OutOfStockRecord, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outOfStockRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outOfStockRecordDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outOfStockRecordDo) Delete(models ...*model.OutOfStockRecord) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outOfStockRecordDo) withDO(do gen.Dao) *outOfStockRecordDo {
	o.DO = *do.(*gen.DO)
	return o
}
