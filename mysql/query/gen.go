// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Book             *book
	Delivery         *delivery
	Order            *order
	OutOfStockRecord *outOfStockRecord
	PurchaseOrder    *purchaseOrder
	Supplier         *supplier
	User             *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Book = &Q.Book
	Delivery = &Q.Delivery
	Order = &Q.Order
	OutOfStockRecord = &Q.OutOfStockRecord
	PurchaseOrder = &Q.PurchaseOrder
	Supplier = &Q.Supplier
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Book:             newBook(db, opts...),
		Delivery:         newDelivery(db, opts...),
		Order:            newOrder(db, opts...),
		OutOfStockRecord: newOutOfStockRecord(db, opts...),
		PurchaseOrder:    newPurchaseOrder(db, opts...),
		Supplier:         newSupplier(db, opts...),
		User:             newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Book             book
	Delivery         delivery
	Order            order
	OutOfStockRecord outOfStockRecord
	PurchaseOrder    purchaseOrder
	Supplier         supplier
	User             user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Book:             q.Book.clone(db),
		Delivery:         q.Delivery.clone(db),
		Order:            q.Order.clone(db),
		OutOfStockRecord: q.OutOfStockRecord.clone(db),
		PurchaseOrder:    q.PurchaseOrder.clone(db),
		Supplier:         q.Supplier.clone(db),
		User:             q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Book:             q.Book.replaceDB(db),
		Delivery:         q.Delivery.replaceDB(db),
		Order:            q.Order.replaceDB(db),
		OutOfStockRecord: q.OutOfStockRecord.replaceDB(db),
		PurchaseOrder:    q.PurchaseOrder.replaceDB(db),
		Supplier:         q.Supplier.replaceDB(db),
		User:             q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Book             IBookDo
	Delivery         IDeliveryDo
	Order            IOrderDo
	OutOfStockRecord IOutOfStockRecordDo
	PurchaseOrder    IPurchaseOrderDo
	Supplier         ISupplierDo
	User             IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Book:             q.Book.WithContext(ctx),
		Delivery:         q.Delivery.WithContext(ctx),
		Order:            q.Order.WithContext(ctx),
		OutOfStockRecord: q.OutOfStockRecord.WithContext(ctx),
		PurchaseOrder:    q.PurchaseOrder.WithContext(ctx),
		Supplier:         q.Supplier.WithContext(ctx),
		User:             q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
